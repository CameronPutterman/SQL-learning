--Goal: Here we use users table to pull a list of user email addresses. Edit the query to pull email
addresses, but only for non-deleted users.

SELECT *
FROM dsv1069.users 
WHERE deleted_at is null
LIMIT 100


--Goal: Use the items table to count the number of items for sale in each category

SELECT 
COUNT(name) AS item_count
,category
FROM dsv1069.items 
GROUP BY category
ORDER BY item_count DESC
LIMIT 100


--Goal: Select all of the columns from the result when you JOIN the users table to the orders
table

SELECT *
FROM dsv1069.users AS users
JOIN dsv1069.orders AS orders on users.created_at = orders.created_at
LIMIT 100


--Goal: Check out the query below. This is not the right way to count the number of viewed_item
events. Determine what is wrong and correct the error.

SELECT COUNT(DISTINCT event_id)
FROM dsv1069.events 
WHERE event_name = 'view_item'
LIMIT 100


--Goal:Compute the number of items in the items table which have been ordered. The query
below runs, but it isnâ€™t right. Determine what is wrong and correct the error or start from scratch.

SELECT COUNT(DISTINCT item_id) AS item_count
FROM dsv1069.orders
LIMIT 100


--Goal: For each user figure out IF a user has ordered something, and when their first purchase
was. 

SELECT users.id AS user_id
,CASE 
WHEN MIN(orders.paid_at) is not null THEN 'Yes'
ELSE 'No'
END AS has_paid
,MIN(orders.paid_at) AS min_paid_at
FROM dsv1069.users
LEFT JOIN dsv1069.orders
ON orders.user_id = users.id 
GROUP BY users.id
LIMIT 100


--Goal: Figure out what percent of users have ever viewed the user profile page.

SELECT 
CASE 
WHEN first_view is null THEN False 
ELSE True 
END AS has_viewed_profile_page
,COUNT(user_id) AS users 
FROM 
  (SELECT 
  users.id AS user_id
  ,MIN(event_time) AS first_view
  FROM dsv1069.users
  LEFT JOIN dsv1069.events 
  ON events.user_id = users.id 
  AND event_name = 'view_user_profile'
  GROUP BY users.id) AS first_profile_views
GROUP BY 
  (CASE WHEN first_view is null THEN false 
  ELSE true
  END)
LIMIT 100
